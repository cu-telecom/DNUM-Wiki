{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About","text":"<p>The Directory, Number &amp; URI Management (DNUM) project was born from a vague aspiration to create a publicly available ENUM platform to allow hobbyist telephony platforms to \"federate\" over the public internet.</p> <p>The initial concept was a single \"domain\" with strict policies on things like encryption and verification, but after giving it more thought it became clear that instead, number blocks could be issued out to sub-groups, and they could have the autonomy to create their own policies.</p> <p>For more information on the proposal, see the Technical Overview section.</p>"},{"location":"#disclaimer","title":"Disclaimer","text":"<ul> <li>This Wiki has been chucked together to gauge interest and start conversations. It's far from complete.</li> <li>Things are rapidly evolving, plans might change.</li> <li>At present this is just an experiment. It may never come to fruition, or die off like many other projects before it.</li> </ul>"},{"location":"#faq","title":"FAQ","text":"<ul> <li>Why DNUM? - It was a temporary name but after chucking together the logo, and creating a backronym, we quite like it.</li> <li>Why DNUM and not ENUM? - The RFC6116 explicitly states you can't use the term \"ENUM\" to describe a DDDS service for private numbering plans. Lame.</li> <li>But I'm happy using my existing network? - It's hoped we can offer a method of peering into existing networks, but it should also be possible to configure your system to interconnect with multiple networks. </li> <li>Can I claim the same number I use on the PSTN? - Probably not.</li> </ul>"},{"location":"#contact-us","title":"Contact Us","text":"<p>We're currently coordinating on the CuTEL Discord Server</p> <p>Or you send us an email to <code>info@</code></p>"},{"location":"configuration/","title":"Configuration","text":""},{"location":"configuration/stirshaken/","title":"STIR/SHAKEN","text":"<p>These are just some notes whilst we experiment. It's not the finished product.</p>"},{"location":"configuration/stirshaken/#generating-certificates-for-testing","title":"Generating Certificates for testing","text":"<p>Modified from https://blog.opensips.org/2022/10/31/how-to-generate-self-signed-stir-shaken-certificates/</p> <p><code>apt -y install openssl coreutils</code></p> <pre><code>mkdir stir-shaken-ca\ncd stir-shaken-ca\n</code></pre> <p>Generate a key for the CA</p> <pre><code>openssl ecparam -noout -name prime256v1 -genkey -out ca-key.pem\n</code></pre> <p>Generate a cert for the CA</p> <pre><code>openssl req -x509 -new -nodes -key ca-key.pem -sha256 -days 365 -out ca-cert.pem\n</code></pre> <pre><code>cd ../\nmkdir stir-shaken-sp1\ncd stir-shaken-sp1\n</code></pre> <p>Generate the key for the service provider</p> <pre><code>openssl ecparam -noout -name prime256v1 -genkey -out sp1-key.pem\n</code></pre> <p>Prepare the certificate configuration</p> <pre><code>cat &gt;TNAuthList.conf &lt;&lt; EOF \nasn1=SEQUENCE:tn_auth_list \n[tn_auth_list] \nfield1=EXP:0,IA5:1001 \nEOF\n\nopenssl asn1parse -genconf TNAuthList.conf -out TNAuthList.der \n\ncat &gt;openssl.conf &lt;&lt; EOF \n[ req ] \ndistinguished_name = req_distinguished_name \nreq_extensions = v3_req \n[ req_distinguished_name ] \ncommonName = \u201cSHAKEN\u201d \n[ v3_req ] \nEOF\n\nod -An -t x1 -w TNAuthList.der | sed -e 's/ /:/g' -e 's/^/1.3.6.1.5.5.7.1.26=DER/'      &gt;&gt;openssl.conf\n</code></pre> <p>Create a CSR</p> <pre><code>openssl req -new -nodes -key sp1-key.pem -keyform PEM  -subj '/C=UK/O=DNUM/CN=SHAKEN' -sha256 -config openssl.conf -out sp1-csr.pem\n</code></pre> <p>Generate the certificate</p> <pre><code>openssl x509 -req -in sp1-csr.pem -CA ../stir-shaken-ca/ca-cert.pem -CAkey ../stir-shaken-ca/ca-key.pem -CAcreateserial -days 365 -sha256 -extfile openssl.conf -extensions v3_req -out sp1-cert.pem\n</code></pre>"},{"location":"configuration/stirshaken/#configuring-asterisk","title":"Configuring asterisk","text":"<p>N.B, Asterisk needs the res_stir_shaken module loaded, which might not have been built when you compiled asterisk. For reasons unknown despite having libjwt installed, Asterisk 22 didn't seem to detect it during compile time. To fix this I have to add <code>--with-libjwt-bundled</code> to the configure command. Don't forget to fix the ownership of the certificates.</p> <p>Copy the generated keys and certs to /var/lib/asterisk/keys/stir_shaken/</p> <p>Edit stir_shaken.conf, update certificate locations (both on the server and the HTTPS URL), define the TNs, define the profile.</p> <p>Edit your endpoint(s) in pjsip.conf to include stir_shaken_profile=myprofile</p> <p>Edit acl.conf to include:</p> <pre><code>[default-acl]\npermit=0.0.0.0/0\n</code></pre> <p>Edit your extensions.conf to include something like:</p> <pre><code>[main-routing]\nexten =&gt; _X.,1,NoOp(main-routing)\nsame =&gt; n,NoOp(Number of STIR/SHAKEN identities: ${STIR_SHAKEN(count)})\nsame =&gt; n,NoOp(Identity ${STIR_SHAKEN(0, identity)} has attestation level ${STIR_SHAKEN(0, attestation)})\nsame =&gt; n,NoOp(Identity ${STIR_SHAKEN(0, identity)} has is verified? ${STIR_SHAKEN(0, verify_result)})\nsame =&gt; n,Goto(play_silence,s,1)\n</code></pre> <p>When finished, restart Asterisk</p>"},{"location":"technical/","title":"Technical Overview","text":"<p>To operate a telephone \"network\" there's a few things we need to consider.</p>"},{"location":"technical/#numbering","title":"Numbering","text":"<p>Numbering makes up a big part of telephony. We propose a hierarchal approach so numbers can be split between organisations and their sub-organisation, with the potential for more granularity.</p> <p>For more information, see Numbering</p>"},{"location":"technical/#routing","title":"Routing","text":"<p>To route calls between entities, we propose the use of an ENUM like system where telephone numbers are mapped to URIs via DNS records.</p> <p>Whilst ENUM will make up the core of the project, there's scope for translation services such as a SIP 302 redirect server or a HTTPS API.</p> <p>For more information, see Routing</p>"},{"location":"technical/#security","title":"Security","text":"<p>Securing such a network is made up of several parts:</p> <ul> <li>Authenticating connections between entities. See Encryption and Authentication</li> <li>Encrypting the Signalling and Media. See Encryption and Authentication</li> <li>Verifying the Caller ID. See Verification</li> </ul>"},{"location":"technical/encryption_authentication/","title":"Encryption and Authentication","text":"<p>Where possible Mutual TLS should be used to encrypt and authenticate the SIP signalling between SIP servers. This both prevents eavesdropping and reduces the risk of leaving a SIP server open to the world, as only servers with a signed client certificate will be able to connect. For encrypting the media streams, SDES, DTLS or ZRTP could be utilised.</p> <p>As we will need to manage a Certificate Authority for the Verification) part, it makes sense to also issue TLS certificates for Client / Server authentication.</p> <p>On older more obscure systems this might not be supported, so whether encryption/authentication is mandatory will be decided by local policy.</p>"},{"location":"technical/numbering/","title":"Numbering","text":"<p>Initially it was assumed that for the UK at least, we'd stick with the existing national numbering scheme, area codes etc. As the idea of DNUM being made up of a hierarchy of autonomous groups has matured, it's become apparent that this might not be the best approach.</p> <p>Instead something like the following might be more practical:</p> <p><code>+44-1234-12345</code></p> <p>Which could be broken down as:</p> Organisation Sub-organisation Subscriber +44 1234 12345 <p>The numbers could be potentially split down further if more granularity is required.</p> <p>The proposed scheme might result in long numbers that are unpleasant to dial from a rotary phone, but it's assumed that most dialling will take place within your \"sub-group\" - meaning the prefixes can be omitted.</p>"},{"location":"technical/numbering/#number-lengths","title":"Number lengths","text":"<p>One challenge is deciding how long numbers should be, which is largely driven by demand and hard to predict. Too short and they might become quickly exhausted. Too long and they're tedious to dial.</p> <p>As a work around, a version number could be added to the ENUM record, e.g 5.2.3.6.1.4.4.v0.dnum.org. Then as number exhaustion approaches, existing numbers could be prefixed with a 1 and the version incremented - our very own PhONEday! </p> <p>To minimise disruption, existing DNS records could be prefixed and copied over to the new version but the previous records would be retained. If systems haven't updated their lookup version, they will still be able to call the same numbers as before, but won't have access to any new numbers issued after the migration. Some thought still needs to be given on how this is handled from the answering side. URIs could be mapped to UUIDs to avoid having to update them, or systems could be configured to route calls based on the last X digits so they continue to function once prefixed. This will likely be decided by what systems can support.</p>"},{"location":"technical/routing/","title":"Number Routing","text":"<p>To route calls between platforms we propose utilising an ENUM like service, defined in RFC6116</p> <p>ENUM performs DNS lookups for a number to resolve a Uniform Resource Identifier (URI) to route the call to. A URI might look something like <code>sip:441632556789@example.com</code>, which indicates a call should be sent via SIP to the number <code>441632556789</code>, on the server that reached at <code>example.com</code></p> <p>ENUM also supports wildcards, allowing a single record to route an entire prefix, and delegation is also built in to allow a particular prefix, e.g a country code, to be redirected to another DNS server.</p>"},{"location":"technical/routing/#enum-overview","title":"ENUM Overview","text":"<p>Name Authority Pointer (NAPTR) records are created on a DNS server, with the full number including country code reversed. e.g for the number 441632556789 you would create the a record for <code>9.8.7.6.5.5.2.3.6.1.4.4.e164.example.com</code> that looks something like:</p> <p><code>100 10 \"u\" \"E2U+sip\" \"!^.*$!sip:441632556789@example.com!\" .</code></p> <p>The record has a specific syntax, described below:</p> Field Value Explanation Order <code>100</code> Defines the processing order. Lower values have higher priority. Preference <code>10</code> Determines priority among records with the same <code>ORDER</code>. Lower values are preferred. Flags <code>\"u\"</code> Specifies the record type: <code>\"u\"</code> (URI), <code>\"s\"</code> (SRV lookup), <code>\"p\"</code> (non-terminal processing). Service <code>\"E2U+sip\"</code> Defines the ENUM service <code>\"E2U+sip\"</code> (ENUM to SIP mapping). Regex <code>\"!^.*$!sip:441632556789@example.com!\"</code> A regular expression for rewriting the ENUM query into a target URI. Rewrites any match (<code>^.*$</code>) to <code>sip:441632556789@example.com</code>. Replacement <code>.</code> Alternative domain (usually <code>.</code> for ENUM records using <code>REGEX</code>). No alternative domain; use the result of the Regex directly. <p>You can test an example ENUM record for 441632556789 by running the following command. Note the URI doesn't route anywhere:</p> <p><code>dig NAPTR 9.8.7.6.5.5.2.3.6.1.4.4.dnum.cutel.net</code></p> <pre><code>; &lt;&lt;&gt;&gt; DiG 9.16.1-Ubuntu &lt;&lt;&gt;&gt; NAPTR 9.8.7.6.5.5.2.3.6.1.4.4.dnum.cutel.net\n;; global options: +cmd\n;; Got answer:\n;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 53739\n;; flags: qr rd ad; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0\n;; WARNING: recursion requested but not available\n\n;; QUESTION SECTION:\n;9.8.7.6.5.5.2.3.6.1.4.4.dnum.cutel.net.        IN NAPTR\n\n;; ANSWER SECTION:\n9.8.7.6.5.5.2.3.6.1.4.4.dnum.cutel.net. 0 IN NAPTR 100 10 \"u\" \"E2U+sip\" \"!^.*$!sip:441632556789@example.com!\" .\n\n;; Query time: 10 msec\n;; SERVER: 172.31.48.1#53(172.31.48.1)\n;; WHEN: Thu Jan 30 23:51:40 GMT 2025\n;; MSG SIZE  rcvd: 157\n</code></pre>"},{"location":"technical/routing/#secondary-dns-servers","title":"Secondary DNS servers","text":"<p>It's hoped that users will host secondary DNS servers to reduce load and increase resilience. And for fun!</p>"},{"location":"technical/routing/#security","title":"Security","text":"<p>To secure the DNS records its envisioned we'll use DNSSEC, but this is a topic we don't currently know much about. If you do, please get in touch.</p>"},{"location":"technical/verification/","title":"Verification","text":"<p>To verify the source of a call is permitted to use the presented Caller ID, systems could utilise STIR/SHAKEN - a method of cryptographically verifying the source of a number. STIR/SHAKEN is now a regulatory requirement in the US, so it's widely supported in the various SIP server offerings.</p> <p>Implementing our own \"private\" STIR/SHAKEN implementation would require running a Certificate Authority and \"chain of trust\" so users can sign and validate the required identity data.</p> <p>It was initially hoped/assumed that certificates would only be able to sign for numbers which they owned. This functionality is mentioned in the RFC but hasn't been implemented as part of the US regulatory implementation. Instead the certificates verify the \"Service Provider Code\" of the service provider that originated the call.</p> <p>After some discussion, it was pointed out that certificates limited to signing the identity of certain numbers probably wouldn't work on the PSTN due to things like number porting, and scenarios where subscribers aren't signing their own calls, but are presenting the same CLI via multiple outbound carriers.</p> <p>One possible idea would be to use DNS TXT records to define the \"Service Provide Codes\" permitted to originate a particular Caller ID, much like the Sender Policy Network used with email.</p>"}]}